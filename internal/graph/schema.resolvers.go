package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/Deepbinder-main/cc-backend/internal/graph/generated"
	"github.com/Deepbinder-main/cc-backend/internal/graph/model"
	"github.com/Deepbinder-main/cc-backend/internal/repository"
	datab "github.com/Deepbinder-main/cc-backend/internal/repository/sqlc/db"
)

var queries = datab.New(repository.GetConnection().DB)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, message string) (bool, error) {
	err := queries.CreateNotification(ctx, message)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateRealtimeLog is the resolver for the createRealtimeLog field.
func (r *mutationResolver) CreateRealtimeLog(ctx context.Context, machineID string, logMessage string) (bool, error) {
	// panic(fmt.Errorf("not implemented: CreateRealtimeLog - createRealtimeLog"))
	params := datab.CreateRealtimeLogParams{
		MachineID:  machineID,
		LogMessage: logMessage,
	}
	err := queries.CreateRealtimeLog(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateLVMConf is the resolver for the createLVMConf field.
func (r *mutationResolver) CreateLVMConf(ctx context.Context, input model.LVMConfInput) (bool, error) {
	// panic(fmt.Errorf("not implemented: CreateLVMConf - createLVMConf"))
	params := datab.CreateLVMConfParams{
		MachineID:           input.MachineID,
		Username:            input.Username,
		Minavailablespacegb: input.MinAvailableSpaceGb,
		Maxavailablespacegb: input.MaxAvailableSpaceGb,
	}
	err := queries.CreateLVMConf(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateMachine is the resolver for the createMachine field.
func (r *mutationResolver) CreateMachine(ctx context.Context, input model.MachineInput) (bool, error) {
	params := datab.CreateMachineParams{
		MachineID: input.MachineID,
		Hostname:  input.Hostname,
		OsVersion: input.OsVersion,
		IpAddress: input.IPAddress,
	}
	err := queries.CreateMachine(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
	// panic(fmt.Errorf("not implemented: CreateMachine - createMachine"))
}

// CreateLogicalVolume is the resolver for the createLogicalVolume field.
func (r *mutationResolver) CreateLogicalVolume(ctx context.Context, input model.LogicalVolumeInput) (bool, error) {
	// panic(fmt.Errorf("not implemented: CreateLogicalVolume - createLogicalVolume"))
	params := datab.CreateLogicalVolumeParams{
		MachineID: input.MachineID,
		LvName:    input.LvName,
		VgName:    input.VgName,
		LvAttr:    input.LvAttr,
		LvSize:    input.LvSize,
	}
	err := queries.CreateLogicalVolume(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateVolumeGroup is the resolver for the createVolumeGroup field.
func (r *mutationResolver) CreateVolumeGroup(ctx context.Context, input model.VolumeGroupInput) (bool, error) {
	params := datab.CreateVolumeGroupParams{
		MachineID: input.MachineID,
		VgName:    input.VgName,
		PvCount:   input.PvCount,
		LvCount:   input.LvCount,
		SnapCount: input.SnapCount,
		VgAttr:    input.VgAttr,
		VgSize:    input.VgSize,
		VgFree:    input.VgFree,
	}
	err := queries.CreateVolumeGroup(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
	// panic(fmt.Errorf("not implemented: CreateVolumeGroup - createVolumeGroup"))
}

// CreatePhysicalVolume is the resolver for the createPhysicalVolume field.
func (r *mutationResolver) CreatePhysicalVolume(ctx context.Context, input model.PhysicalVolumeInput) (bool, error) {
	params := datab.CreatePhysicalVolumeParams{
		MachineID: input.MachineID,
		PvName:    input.PvName,
		VgName:    input.VgName,
		PvFmt:     input.PvFmt,
		PvAttr:    input.PvAttr,
		PvSize:    input.PvSize,
		PvFree:    input.PvFree,
	}
	err := queries.CreatePhysicalVolume(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
	// panic(fmt.Errorf("not implemented: CreatePhysicalVolume - createPhysicalVolume"))
}

// CreateLVStorageIssuer is the resolver for the createLVStorageIssuer field.
func (r *mutationResolver) CreateLVStorageIssuer(ctx context.Context, input model.LVStorageIssuerInput) (bool, error) {
	params := datab.CreateLVStorageIssuerParams{
		MachineID:           input.MachineID,
		IncBuffer:           input.IncBuffer,
		DecBuffer:           input.DecBuffer,
		Hostname:            input.Hostname,
		Username:            input.Username,
		Minavailablespacegb: input.MinAvailableSpacegb,
		Maxavailablespacegb: input.Maxavailablespacegb,
	}
	err := queries.CreatePhysicalVolume(ctx, params)
	if err != nil {
		return false, err
	}
	return true, nil
	// panic(fmt.Errorf("not implemented: CreateLVStorageIssuer - createLVStorageIssuer"))
}

// CreateMachineConf is the resolver for the createMachineConf field.
func (r *mutationResolver) CreateMachineConf(ctx context.Context, input model.MachineConfInput) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateMachineConf - createMachineConf"))
}

// CreateFileStashURL is the resolver for the createFileStashURL field.
func (r *mutationResolver) CreateFileStashURL(ctx context.Context, url string) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateFileStashURL - createFileStashURL"))
}

// CreateRabbitMQConfig is the resolver for the createRabbitMQConfig field.
func (r *mutationResolver) CreateRabbitMQConfig(ctx context.Context, input model.RabbitMQConfigInput) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateRabbitMQConfig - createRabbitMQConfig"))
}

// CreateInfluxDBConfiguration is the resolver for the createInfluxDBConfiguration field.
func (r *mutationResolver) CreateInfluxDBConfiguration(ctx context.Context, input model.InfluxDBConfigurationInput) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateInfluxDBConfiguration - createInfluxDBConfiguration"))
}

// UpdateRabbitMQConfig is the resolver for the updateRabbitMQConfig field.
func (r *mutationResolver) UpdateRabbitMQConfig(ctx context.Context, input model.RabbitMQConfigInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateRabbitMQConfig - updateRabbitMQConfig"))
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context, limit *int) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: Notifications - notifications"))
}

// RealtimeLogs is the resolver for the realtimeLogs field.
func (r *queryResolver) RealtimeLogs(ctx context.Context, machineID string, limit *int) ([]*model.RealtimeLog, error) {
	panic(fmt.Errorf("not implemented: RealtimeLogs - realtimeLogs"))
}

// LvmConf is the resolver for the lvmConf field.
func (r *queryResolver) LvmConf(ctx context.Context, machineID string) (*model.LVMConf, error) {
	panic(fmt.Errorf("not implemented: LvmConf - lvmConf"))
}

// Machine is the resolver for the machine field.
func (r *queryResolver) Machine(ctx context.Context, machineID string) (*model.Machine, error) {
	panic(fmt.Errorf("not implemented: Machine - machine"))
}

// LogicalVolumes is the resolver for the logicalVolumes field.
func (r *queryResolver) LogicalVolumes(ctx context.Context, machineID string) ([]*model.LogicalVolume, error) {
	panic(fmt.Errorf("not implemented: LogicalVolumes - logicalVolumes"))
}

// VolumeGroups is the resolver for the volumeGroups field.
func (r *queryResolver) VolumeGroups(ctx context.Context, machineID string) ([]*model.VolumeGroup, error) {
	panic(fmt.Errorf("not implemented: VolumeGroups - volumeGroups"))
}

// PhysicalVolumes is the resolver for the physicalVolumes field.
func (r *queryResolver) PhysicalVolumes(ctx context.Context, machineID string) ([]*model.PhysicalVolume, error) {
	panic(fmt.Errorf("not implemented: PhysicalVolumes - physicalVolumes"))
}

// LvStorageIssuers is the resolver for the lvStorageIssuers field.
func (r *queryResolver) LvStorageIssuers(ctx context.Context) ([]*model.LVStorageIssuer, error) {
	panic(fmt.Errorf("not implemented: LvStorageIssuers - lvStorageIssuers"))
}

// MachineConf is the resolver for the machineConf field.
func (r *queryResolver) MachineConf(ctx context.Context, machineID string) (*model.MachineConf, error) {
	panic(fmt.Errorf("not implemented: MachineConf - machineConf"))
}

// FileStashURL is the resolver for the fileStashURL field.
func (r *queryResolver) FileStashURL(ctx context.Context) (*model.FileStashURL, error) {
	panic(fmt.Errorf("not implemented: FileStashURL - fileStashURL"))
}

// RabbitMQConfig is the resolver for the rabbitMQConfig field.
func (r *queryResolver) RabbitMQConfig(ctx context.Context) (*model.RabbitMQConfig, error) {
	panic(fmt.Errorf("not implemented: RabbitMQConfig - rabbitMQConfig"))
}

// InfluxDBConfiguration is the resolver for the influxDBConfiguration field.
func (r *queryResolver) InfluxDBConfiguration(ctx context.Context) (*model.InfluxDBConfiguration, error) {
	panic(fmt.Errorf("not implemented: InfluxDBConfiguration - influxDBConfiguration"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
