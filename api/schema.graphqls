scalar Time
scalar Any

scalar NullableFloat
scalar MetricScope



type User {
  username: String!
  name:     String!
  email:    String!
}

type Query {
  notifications(limit: Int): [Notification!]!
  realtimeLogs(machineID: String!, limit: Int): [RealtimeLog!]!
  lvmConf(machineID: String!): LVMConf
  machine(machineID: String!): Machine
  logicalVolumes(machineID: String!): [LogicalVolume!]!
  volumeGroups(machineID: String!): [VolumeGroup!]!
  physicalVolumes(machineID: String!): [PhysicalVolume!]!
  lvStorageIssuers: [LVStorageIssuer!]!
  machineConf(machineID: String!): MachineConf
  fileStashURL: FileStashURL
  rabbitMQConfig: RabbitMQConfig
  influxDBConfiguration: InfluxDBConfiguration
}

type Mutation {
  createNotification(message: String!): Boolean!
  createRealtimeLog(machineID: String!, logMessage: String!): Boolean!
  createLVMConf(input: LVMConfInput!): Boolean!
  createMachine(input: MachineInput!): Boolean!
  createLogicalVolume(input: LogicalVolumeInput!): Boolean!
  createVolumeGroup(input: VolumeGroupInput!): Boolean!
  createPhysicalVolume(input: PhysicalVolumeInput!): Boolean!
  createLVStorageIssuer(input: LVStorageIssuerInput!): Boolean!
  createMachineConf(input: MachineConfInput!): Boolean!
  createFileStashURL(url: String!): Boolean!
  createRabbitMQConfig(input: RabbitMQConfigInput!): Boolean!
  createInfluxDBConfiguration(input: InfluxDBConfigurationInput!): Boolean!
  updateRabbitMQConfig(input: RabbitMQConfigInput!): Boolean!
}

type Notification {
  id: ID!
  message: String!
  createdAt: Time
}

type RealtimeLog {
  id: ID!
  logMessage: String!
  machineID: String!
  createdAt: Time
}

type LVMConf {
  id: ID!
  machineID: String!
  username: String!
  minAvailableSpaceGB: Float!
  maxAvailableSpaceGB: Float!
  createdAt: Time
}

type Machine {
  machineID: ID!
  hostname: String!
  osVersion: String!
  ipAddress: String!
  createdAt: Time
}

type LogicalVolume {
  lvID: ID!
  machineID: String!
  lvName: String!
  vgName: String!
  lvAttr: String!
  lvSize: String!
  createdAt: Time
}

type VolumeGroup {
  vgID: ID!
  machineID: String!
  vgName: String!
  pvCount: String!
  lvCount: String!
  snapCount: String!
  vgAttr: String!
  vgSize: String!
  vgFree: String!
  createdAt: Time
}

type PhysicalVolume {
  pvID: ID!
  machineID: String!
  pvName: String!
  vgName: String!
  pvFmt: String!
  pvAttr: String!
  pvSize: String!
  pvFree: String!
  createdAt: Time
}

type LVStorageIssuer {
  id: ID!
  machineID: String!
  incBuffer: Int
  decBuffer: Int
  hostname: String!
  username: String!
  minAvailableSpaceGB: Float!
  maxAvailableSpaceGB: Float!
}

type MachineConf {
  id: ID!
  machineID: String!
  hostname: String!
  username: String!
  passphrase: String
  portNumber: Int!
  password: String
  hostKey: String
  folderPath: String
}

type FileStashURL {
  id: ID!
  url: String!
  createdAt: Time
  singleRowEnforcer: Int!
}

type RabbitMQConfig {
  connURL: String!
  username: String!
  password: String!
  createdAt: Time
  singleRowEnforcer: Int!
}

type InfluxDBConfiguration {
  id: ID!
  type: String!
  databaseName: String!
  host: String!
  port: Int!
  user: String!
  password: String!
  organization: String!
  sslEnabled: Boolean!
  batchSize: Int!
  retryInterval: String!
  retryExponentialBase: Int!
  maxRetries: Int!
  maxRetryTime: String!
  metaAsTags: String
  singleRowEnforcer: Int!
}

input LVMConfInput {
  machineID: String!
  username: String!
  minAvailableSpaceGB: Float!
  maxAvailableSpaceGB: Float!
}

input MachineInput {
  machineID: String!
  hostname: String!
  osVersion: String!
  ipAddress: String!
}

input LogicalVolumeInput {
  machineID: String!
  lvName: String!
  vgName: String!
  lvAttr: String!
  lvSize: String!
}

input VolumeGroupInput {
  machineID: String!
  vgName: String!
  pvCount: String!
  lvCount: String!
  snapCount: String!
  vgAttr: String!
  vgSize: String!
  vgFree: String!
}

input PhysicalVolumeInput {
  machineID: String!
  pvName: String!
  vgName: String!
  pvFmt: String!
  pvAttr: String!
  pvSize: String!
  pvFree: String!
}

input LVStorageIssuerInput {
  machineID: String!
  hostname: String!
  username: String!
  minAvailableSpaceGB: Float!
  maxAvailableSpaceGB: Float!
}

input MachineConfInput {
  machineID: String!
  hostname: String!
  username: String!
  passphrase: String
  portNumber: Int!
  password: String
  hostKey: String
  folderPath: String
}

input RabbitMQConfigInput {
  connURL: String!
  username: String!
  password: String!
}

input InfluxDBConfigurationInput {
  type: String!
  databaseName: String!
  host: String!
  port: Int!
  user: String!
  password: String!
  organization: String!
  sslEnabled: Boolean!
  batchSize: Int!
  retryInterval: String!
  retryExponentialBase: Int!
  maxRetries: Int!
  maxRetryTime: String!
  metaAsTags: String
}

type IntRangeOutput { from: Int!, to: Int! }
type TimeRangeOutput { from: Time!, to: Time! }


input OrderByInput {
  field: String!
  order: SortDirectionEnum! = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

input IntRange   { from: Int!,   to: Int! }
input FloatRange { from: Float!, to: Float! }
input TimeRange  { from: Time,   to: Time }


input PageRequest {
  itemsPerPage: Int!
  page:         Int!
}
