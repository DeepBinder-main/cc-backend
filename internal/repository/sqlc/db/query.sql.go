// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const deleteFileStashURL = `-- name: DeleteFileStashURL :exec
DELETE FROM file_stash_url
WHERE single_row_enforcer = 1
`

func (q *Queries) DeleteFileStashURL(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteFileStashURL)
	return err
}

const deleteRabbitMQConfig = `-- name: DeleteRabbitMQConfig :exec
DELETE FROM rabbit_mq_config
WHERE single_row_enforcer = 1
`

func (q *Queries) DeleteRabbitMQConfig(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteRabbitMQConfig)
	return err
}

const getFileStashURL = `-- name: GetFileStashURL :one
SELECT id, url, created_at, single_row_enforcer FROM file_stash_url LIMIT 1
`

func (q *Queries) GetFileStashURL(ctx context.Context) (FileStashUrl, error) {
	row := q.db.QueryRowContext(ctx, getFileStashURL)
	var i FileStashUrl
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.SingleRowEnforcer,
	)
	return i, err
}

const getRabbitMQConfig = `-- name: GetRabbitMQConfig :one
SELECT conn_url, username, password, created_at, single_row_enforcer FROM rabbit_mq_config LIMIT 1
`

func (q *Queries) GetRabbitMQConfig(ctx context.Context) (RabbitMqConfig, error) {
	row := q.db.QueryRowContext(ctx, getRabbitMQConfig)
	var i RabbitMqConfig
	err := row.Scan(
		&i.ConnUrl,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.SingleRowEnforcer,
	)
	return i, err
}

const insertFileStashURL = `-- name: InsertFileStashURL :exec
INSERT INTO file_stash_url (url, single_row_enforcer)
VALUES (?, 1)
ON DUPLICATE KEY UPDATE url = VALUES(url)
`

func (q *Queries) InsertFileStashURL(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, insertFileStashURL, url)
	return err
}

const insertRabbitMQConfig = `-- name: InsertRabbitMQConfig :exec
INSERT INTO rabbit_mq_config (conn_url, username, password, single_row_enforcer)
VALUES (?, ?, ?, 1)
ON DUPLICATE KEY UPDATE conn_url = VALUES(conn_url), username = VALUES(username), password = VALUES(password)
`

type InsertRabbitMQConfigParams struct {
	ConnUrl  string
	Username string
	Password string
}

func (q *Queries) InsertRabbitMQConfig(ctx context.Context, arg InsertRabbitMQConfigParams) error {
	_, err := q.db.ExecContext(ctx, insertRabbitMQConfig, arg.ConnUrl, arg.Username, arg.Password)
	return err
}

const updateFileStashURL = `-- name: UpdateFileStashURL :exec
UPDATE file_stash_url
SET url = ?
WHERE single_row_enforcer = 1
`

func (q *Queries) UpdateFileStashURL(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, updateFileStashURL, url)
	return err
}

const updateRabbitMQConfig = `-- name: UpdateRabbitMQConfig :exec
UPDATE rabbit_mq_config
SET conn_url = ?, username = ?, password = ?
WHERE single_row_enforcer = 1
`

type UpdateRabbitMQConfigParams struct {
	ConnUrl  string
	Username string
	Password string
}

func (q *Queries) UpdateRabbitMQConfig(ctx context.Context, arg UpdateRabbitMQConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateRabbitMQConfig, arg.ConnUrl, arg.Username, arg.Password)
	return err
}
